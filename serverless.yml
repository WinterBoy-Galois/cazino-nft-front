service:
  name: cazzzino-webapp

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1
  stage: ${opt:stage, 'dev'}
  stackName: ${self:service.name}-${self:provider.stage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  environment:
    accountId: '#{AWS::AccountId}'
    region: '#{AWS::Region}'
    stage: ${self:provider.stage}
  tags:
    Application: CaZZZino
    Name: ${self:service.name}

plugins:
  - serverless-s3-sync

custom:
  siteName: cazzzino.${self:provider.stage}.egonoid.net
  certificate:
    dev: arn:aws:acm:us-east-1:329426105556:certificate/73a6f5c8-3e39-416a-85e4-cb6b52eb0d94
    test: arn:aws:acm:us-east-1:662809561885:certificate/c2e7a9c9-0cbb-4934-9fcc-9488a0297ef6
  aliasHostedZoneId: Z2FDTNDATAQYW2
  s3Sync:
    - bucketName: ${self:custom.siteName}
      localDir: build
  profiles:
    dev: cazzzino-dev
    test: cazzzino-test
  basicAuthFunction:
    dev: arn:aws:lambda:us-east-1:329426105556:function:cazzzino-basic-auth-dev-onViewerRequest:1
    test: arn:aws:lambda:us-east-1:662809561885:function:cazzzino-basic-auth-dev-onViewerRequest:7

resources:
  Resources:
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private
        BucketName: ${self:custom.siteName}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - Authorization
                - Content-Length
              AllowedMethods:
                - GET
              AllowedOrigins:
                - '*'
              MaxAge: 3000
    WebAppBucketOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: 'CloudFrontOriginAccessIdentity for ${self:provider.stage}-${self:service}'
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:custom.siteName}
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - 'arn:aws:s3:::${self:custom.siteName}/*'
              Principal:
                AWS:
                  {
                    'Fn::Join':
                      [
                        ' ',
                        [
                          'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity',
                          { Ref: WebAppBucketOriginAccessIdentity },
                        ],
                      ],
                  }
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: CaZZZino App (${self:custom.siteName}) CloudFront Distribution
          Aliases:
            - 'cazzzino.${self:provider.stage}.egonoid.net'
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          Aliases:
            - ${self:custom.siteName}
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.certificate.${self:provider.stage}}
            SslSupportMethod: sni-only
          DefaultCacheBehavior:
            TargetOriginId: ${self:custom.siteName}-S3
            ViewerProtocolPolicy: 'redirect-to-https'
            DefaultTTL: 30
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            Compress: True
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: ${self:custom.basicAuthFunction.${self:provider.stage}}
              - EventType: origin-request
                LambdaFunctionARN: 'arn:aws:lambda:us-east-1:662809561885:function:cazzzino-basic-auth-dev-onOriginRequest:1'
          HttpVersion: http2
          ViewerCertificate:
            AcmCertificateArn: arn:aws:acm:us-east-1:662809561885:certificate/c2e7a9c9-0cbb-4934-9fcc-9488a0297ef6
            SslSupportMethod: sni-only
          Enabled: true
          Origins:
            - Id: ${self:custom.siteName}-S3
              DomainName: ${self:custom.siteName}.s3.amazonaws.com
              S3OriginConfig:
                OriginAccessIdentity:
                  {
                    'Fn::Join':
                      [
                        '',
                        [
                          'origin-access-identity/cloudfront/',
                          { Ref: WebAppBucketOriginAccessIdentity },
                        ],
                      ],
                  }

  Outputs:
    WebAppCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [WebAppCloudFrontDistribution, DomainName]
